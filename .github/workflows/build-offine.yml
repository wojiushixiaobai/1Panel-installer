on:
  push:
    branches:
      - master
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

name: Checkout and Create Release Version

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Version
        id: get-version
        run: |
          version=$(curl -s 'https://api.github.com/repos/wojiushixiaobai/1Panel/releases/latest' | jq -r ".tag_name")
          docker_version=$(curl -s 'https://api.github.com/repos/moby/moby/releases/latest' | jq -r ".tag_name")
          compose_version=$(curl -s 'https://api.github.com/repos/docker/compose/releases/latest' | jq -r ".tag_name")
          echo "version=${version}" >> $GITHUB_OUTPUT
          echo "app_version=${version}" >> $GITHUB_OUTPUT
          echo "docker_version=${docker_version/v/}" >> $GITHUB_OUTPUT
          echo "compose_version=${compose_version}" >> $GITHUB_OUTPUT
          echo "Current app_version: $version, docker_version: $docker_version, compose_version: $compose_version"

      - name: Check Release
        id: check-release
        run: |
          gh release view ${{ steps.get-version.outputs.version }} -R ${{ github.repository }} >/dev/null 2>&1 || echo "create=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Buile
        id: check-build
        run: |
          gh release view ${{ steps.get-version.outputs.version }} -R ${{ github.repository }} | grep 1panel-.*-offline-linux-amd64.tar.gz >/dev/null 2>&1 || echo "build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Tag
        run: |
          sed -i "s@VERSION=v.*@VERSION=${{ steps.get-version.outputs.version }}@" install.sh
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Release ${{ steps.get-version.outputs.version }}"
          git tag -a "${{ steps.get-version.outputs.version }}" -m "Release ${{ steps.get-version.outputs.version }}" || true
          git push origin "${{ steps.get-version.outputs.version }}" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check-release.outputs.create == 1
        run: |
          gh release create ${{ steps.get-version.outputs.version }} --notes "Release ${{ steps.get-version.outputs.version }}" -R ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Make Offine
        if: steps.check-build.outputs.build == 1
        run: |
          chmod +x prepare.sh
          ./prepare.sh --app_version ${{ steps.get-version.outputs.app_version }} --docker_version ${{ steps.get-version.outputs.docker_version }} --compose_version ${{ steps.get-version.outputs.compose_version }}

      - name: Upgrade Release
        if: steps.check-build.outputs.build == 1
        run: |
          gh release upload ${{ steps.get-version.outputs.version }} build/${{ steps.get-version.outputs.version }}/*.tar.gz -R ${{ github.repository }} --clobber
          gh release upload ${{ steps.get-version.outputs.version }} build/${{ steps.get-version.outputs.version }}/checksums.txt -R ${{ github.repository }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}